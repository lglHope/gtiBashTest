一、移除本地文件（暂存区：只看是否有变更已跟踪，不管是否add）
 1、在暂存区进行管理
 （1）在目录中删除本地文件，再通过 git rm file删除暂存区的记录
 （2）通过 git rm -f file强制删除本地和暂存区快照 
 2、不在暂存区进行管理
      直接删除文件即可 git rm file


    要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。

    如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：
    然后再运行 git rm 记录此次移除文件的操作：
    下一次提交时，该文件就不再纳入版本管理了。如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 -f（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删尚未添加到快照的数据，这样的数据不能被 Git 恢复。


二、不移除本地文件（只是不纳入git管理）
 1、git rm --cached README

 我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 --cached 选项：
 $ git rm --cached README
git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。比如：

 $ git rm log/\*.log
注意到星号 * 之前的反斜杠 \， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。 此命令删除 log/ 目录下扩展名为 .log 的所有文件。 类似的比如：

 $ git rm \*~
该命令会删除所有名字以 ~ 结尾的文件。


rm 、git rm 、git rm --cached的区别
rm

删除文件

git rm

git rm
当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用git rm
git rm file = rm file+ git add file
rm file删除本地文件
git add file 提交删除的步骤同步到git仓库

git rm --cached file

当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用 git rm --cached
git rm --cached 会从index里面删除该文件，下次commit的时候会修改git仓库，但是本地的文件还是保留

Untrack and stop tracking files in git

有一些文件我们不想提交到git上去了，但是又被检测到有变化，显示Untracked files，我们可以采用
git rm --cached file来停止跟踪这些文件

