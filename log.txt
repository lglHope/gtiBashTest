git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。

git log -p -2  选项是 -p 或 --patch ，它会显示每次提交所引入的差异（按 补丁 的格式输出）。 你也可以限制显示的日志条目数量，例如使用 -2 选项来只显示最近的两次提交

git log --stat 想看到每次提交的简略统计信息，可以使用 --stat 选项,--stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结

git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。

Table 1. git log --pretty=format 常用的选项
选项	说明
%H     提交的完整哈希值

%h     提交的简写哈希值

%T     树的完整哈希值

%t     树的简写哈希值

%P     父提交的完整哈希值

%p     父提交的简写哈希值

%an    作者名字

%ae    作者的电子邮件地址

%ad    作者修订日期（可以用 --date=选项 来定制格式）

%ar    作者修订日期，按多久以前的方式显示

%cn    提交者的名字

%ce    提交者的电子邮件地址

%cd    提交日期

%cr    提交日期（距今多长时间）

%s     提交说明

git log --pretty=format:"%h %s" --graph
选项	          说明
-p                按补丁格式显示每个提交引入的差异。

--stat            显示每次提交的文件修改统计信息。

--shortstat       只显示 --stat 中最后的行数修改添加移除统计。

--name-only       仅在提交信息后显示已修改的文件清单。

--name-status     显示新增、修改、删除的文件清单。

--abbrev-commit   仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。

--relative-date   使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。

--graph           在日志旁以 ASCII 图形显示分支与合并历史。

--pretty          使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format                 （用来定义自己的格式）。

--oneline         --pretty=oneline --abbrev-commit 合用的简写。

git log -S function_name
选项	              说明
-<n>                  仅显示最近的 n 条提交。

--since, --after      仅显示指定时间之后的提交。

--until, --before     仅显示指定时间之前的提交。

--author              仅显示作者匹配指定字符串的提交。

--committer           仅显示提交者匹配指定字符串的提交。

--grep                仅显示提交说明中包含指定字符串的提交。

-S                    仅显示添加或删除内容匹配指定字符串的提交。

1111111111111111111111
